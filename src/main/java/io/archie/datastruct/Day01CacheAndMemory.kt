package io.archie.datastruct

/**
 * # 内存与缓存
 * 数组和链表这两种基础且重要的数据结构，分别代表了“连续存储”和“分散存储”两种物理结构。
 *
 * 实际上：物理结构在很大程度上决定了程序对内存和缓存的使用效率。
 *
 * ## 计算机存储设备
 * 硬盘、内存、缓存
 * - 内存是有限的，且同一块内存空间不能被多个程序共享。
 * - 随着反复申请与释放内存，空闲内存的碎片化程序会越来越高。
 *
 * ## 数据结构的缓存效率
 * 当CPU尝试访问的数据不在缓存时，发生缓存未命中，为了提高缓存命中率，会采用以下数据加载机制
 * - 缓存行
 * - 预存机制 CPU会尝试预测数据访问模式（顺序访问、固定步长跳跃访问），根据特定模式将数据加载到缓存
 * - 空间局部性 如果数据被访问，那么它附近的数据可能近期也会被访问。所以缓存在加载某一数据时，也会加载其附近的数据
 * - 时间局部性 如果数据被访问，那么它可能近期也会被访问。缓存会保留最近访问过的数据来提高命中率
 *
 * ## 数组对缓存的利用效率
 * - 占用空间：链表元素比数组元素占用的空间多（指针），导致缓存容纳的有效数据减少
 * - 缓存行：链表数据分散在内存各处，数组数据连续，因此加载到缓存中的有效数据更多
 * - 预存机制：数组比链表的数据访问模式更具“可预测性”
 * - 空间局部性：数组存储在集中的内存空间中，更有可能被访问加载到缓存中的附近数据
 *
 * 数组具有更高的缓存命中率，在操作效率上更优于链表
 *
 * ## 实际情况
 * - 做算法题中：会更倾向于基于数组实现的栈，提供了更高的操作效率和随机访问能力
 * - 如果数据量非常大、动态性很高、栈大小难以估计，试用基于链表的栈更加合适。
 */
class Day01CacheAndMemory {
}